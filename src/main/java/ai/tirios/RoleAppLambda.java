package ai.tirios;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.stereotype.Component;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;
import com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;

import ai.tirios.rolePermission.dto.Auth;
import ai.tirios.rolePermission.dto.Permission;
import ai.tirios.rolePermission.dto.Role;
import ai.tirios.rolePermission.service.PermissionService;
import ai.tirios.rolePermission.service.RoleService;
import ai.tirios.rolePermission.service.UserService;

//public class RoleAppLambda implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {
public class RoleAppLambda implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {

	@Autowired
	RoleService roleService;
	@Autowired
	PermissionService permissionService;
	@Autowired
	UserService userService;
	 static AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(
			 RoleAppLambda.class.getPackage().getName());

		    public RoleAppLambda() {
		        ctx.getAutowireCapableBeanFactory().autowireBean(this);
		    }
		    
	@Override
	public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {
		String url = input.getPath();
		if (url.equals("/v1/role")) {
			List<Role> roles = roleService.getRoles();
			APIGatewayProxyResponseEvent r = getResponse();
			r.setBody(roles.toString());
			return r;
		} else if (url.equals("/v1/permission")) {
			List<Permission> perms = permissionService.getPermissions();
			APIGatewayProxyResponseEvent r = getResponse();
			r.setBody(perms.toString());
			return r;
		} else if (url.contains("/v1/role/")) {
			 String[] ary=url.split("/");
			 String roleId=ary[ary.length-2];
			 
			List<Permission> perms=roleService.getPermissions(Integer.parseInt(roleId));
			APIGatewayProxyResponseEvent r = getResponse();
			r.setBody(perms.toString());
			return r;
		}else if(url.contains("/v1/user")) {

			 String[] ary=url.split("/");
			 String roleId=ary[ary.length-1];
			 
			Auth auth=userService.getUserAuth(Integer.parseInt(roleId));
			APIGatewayProxyResponseEvent r = getResponse();
			r.setBody(auth.toString());
			return r;
		
		}
		return getResponse();
	}

	private APIGatewayProxyResponseEvent getResponse() {
		APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();
		response.setIsBase64Encoded(false);
		response.setStatusCode(200);
		HashMap<String, String> headers = new HashMap<String, String>();
		headers.put("Content-Type", "text/html");
		response.setHeaders(headers);
		response.setBody("<!DOCTYPE html><html><head><title>AWS Lambda sample</title></head><body>"
				+ "<h1>Welcome</h1><p>Page generated by a Lambda function.</p>" + "</body></html>");
		return response;
	}

}
